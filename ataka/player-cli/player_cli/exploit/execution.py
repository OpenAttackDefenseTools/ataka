import typer
vanilla_print = print
from rich import print

from ..util import dt_to_local_str, highlight_flags, blueify, redify, magentify, greenify, yellowfy

EXECUTION_STATUS_IS_FINAL = {'finished', 'failed', 'timeout', 'cancelled'}

EXECUTION_STATUS_COLOR = {
    'queued': magentify,
    'running': blueify,
    'finished': greenify,
    'failed': redify,
    'timeout': yellowfy,
    'cancelled': redify,
}


def print_exploit_execution(job, execution):
    def _print_output(label, output):
        if not output:
            return
        for line in output.splitlines():
            vanilla_print(f'{label} {highlight_flags(line, lambda x: typer.style(x, fg=typer.colors.BLUE, bold=True))}')

    exe_desc = f'execution {execution["id"]} of job {job["id"]}'

    status = execution['status']
    status_note = ' (not finished, check back later)' if status not in EXECUTION_STATUS_IS_FINAL else ''

    print(f'--- Begin {exe_desc} ---')
    print(f'Status    : {EXECUTION_STATUS_COLOR[status](status)}{status_note}')
    print(f'Exploit   : {job["exploit_id"]}')
    print(f'Target    : {execution["target"]["ip"]} ({execution["target"]["service"]})')
    print(f'Timestamp : {dt_to_local_str(job["timestamp"])}')

    if execution['stdout'] is not None:
        _print_output('   ', execution['stdout'])
    if execution['stderr'] is not None:
        _print_output(typer.style('ERR', fg=typer.colors.RED, bold=True), execution['stderr'])

    print(f'--- End {exe_desc} ---')
    print()
