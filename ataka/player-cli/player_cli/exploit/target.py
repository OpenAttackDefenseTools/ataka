import typer
from rich import print

from typing import List
from player_cli.ctfconfig_wrapper import STATIC_EXCLUSIONS, RUNLOCAL_TARGETS, ROUND_TIME
from .exploit import resolve_history, resolve_exploit
from player_cli.util import request, greenify, redify, WARN_STR, ERROR_STR

app = typer.Typer()


def print_exploit_targets(history, indent=0):
    indent = ' ' * indent

    exclude_ips = set(request('GET', f'exploit_history/{history["id"]}/exclusions'))

    columns = typer.get_terminal_size()[0] // 24

    i = 0
    targets = get_targets(history['service'])
    target_set = set([x['ip'] for x in targets]) | exclude_ips

    # try some sorting
    try:
        # based on ipv4
        target_set = sorted(target_set, key=lambda x: [int(a) for a in x.split(".")])
    except ValueError:
        try:
            # based on ipv6
            target_set = sorted(target_set, key=lambda x: [0 if a == '' else int(a, base=16) for a in x.split(":")])
        except ValueError:
            pass

    for ip in target_set:
        if ip in STATIC_EXCLUSIONS:
            continue
        status = redify('OFF') if ip in exclude_ips else greenify('ON ')
        if i % columns == 0:
            print(indent, end='')
        print(f'{status} {ip.ljust(20)}', end='\n' if (i % columns) == (columns - 1) else '')
        i += 1

    if i % columns > 0:
        print()


def get_targets(service, all_targets=True, target_ips=RUNLOCAL_TARGETS, no_target_ips=None, ignore_exclusions=False):
    if no_target_ips is None:
        no_target_ips = set()

    no_target_ips = set(no_target_ips)
    target_ips = set(target_ips)
    if not ignore_exclusions:
        no_target_ips |= STATIC_EXCLUSIONS

    targets = request('GET', 'targets', params={} if service is None else {'service': service})

    if not all_targets:
        targets = [t for t in targets if t['ip'] in target_ips]
    return [t for t in targets if t['ip'] not in no_target_ips]


@app.command('ls', help='List exploit targets.')
def exploit_target_ls(
        history_id: str = typer.Argument(..., help='History ID.')
):
    history = resolve_history(history_id)

    print_exploit_targets(history)


def _exploit_target_on_off(history_id: str, target_ips: List[str], all_flag: bool, force: bool, on: bool):
    target_ips = set(target_ips)

    if all_flag and len(target_ips) > 0:
        print(f'{ERROR_STR}: you specified both --all and target IP(s), this is probably a mistake')
        raise typer.Exit(code=1)
    if not all_flag and len(target_ips) == 0:
        print(f'{ERROR_STR}: no target IP(s) specified (did you want --all?)')
        raise typer.Exit(code=1)

    history = resolve_history(history_id)

    targets = get_targets(history['service'])
    target_set = set([x['ip'] for x in targets])

    current_exclude_ips = set(request('GET', f'exploit_history/{history_id}/exclusions'))

    for ip in target_ips:
        if ip in STATIC_EXCLUSIONS:
            print(f'{WARN_STR}: ignoring target {ip} (static exclusion)')
        elif ip not in target_set:
            if force:
                print(f'{WARN_STR}: unknown target {ip} (proceeding anyway)')
            else:
                print(f'{ERROR_STR}: unknown target {ip} (use --force to exclude anyway)')
                raise typer.Exit(code=1)

    if on:
        if all_flag:
            new_exclude_ips = set()
        else:
            new_exclude_ips = current_exclude_ips - (target_ips - STATIC_EXCLUSIONS)
    else:
        if all_flag:
            target_ips = target_set

        new_exclude_ips = current_exclude_ips | (target_ips - STATIC_EXCLUSIONS)

    if new_exclude_ips != current_exclude_ips:
        request('PUT', f'exploit_history/{history_id}/exclusions', data={
            'target_ips': list(new_exclude_ips),
        })

    print_exploit_targets(history)


@app.command('on', help='Turn on exploit targets.')
def exploit_target_on(
        history_id: str = typer.Argument(..., help='History ID.'),
        target_ips: List[str] = typer.Argument(None, help='Target IP(s).'),
        all_flag: bool = typer.Option(False, '--all', help='Turn on all targets.')
):
    _exploit_target_on_off(history_id, target_ips, all_flag, True, True)

    exploit = resolve_exploit(history_id)

    targets = get_targets(exploit['history']['service'], target_ips=target_ips, all_targets=all_flag)

    job = request('POST', 'job', data={
        'targets': [target['id'] for target in targets],
        'exploit_id': exploit['id'],
        'manual_id': None,
        'timeout': ROUND_TIME,
    })
    print(f"Created job {job['id']} for targets {', '.join([target['ip'] for target in targets])}")

@app.command('off', help='Turn off exploit targets.')
def exploit_target_off(
        history_id: str = typer.Argument(..., help='History ID.'),
        target_ips: List[str] = typer.Argument(None, help='Target IP(s).'),
        all_flag: bool = typer.Option(False, '--all', help='Turn on all targets.'),
        force: bool = typer.Option(False, '--force', help=
        'Allow exclusion of unknown targets.')
):
    _exploit_target_on_off(history_id, target_ips, all_flag, force, False)
