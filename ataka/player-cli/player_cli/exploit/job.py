import os
import subprocess
from rich import print

from player_cli.util import greenify, yellowfy, redify, request

SUCCESS_STR = greenify("success")
TIMEOUT_STR = yellowfy("timeout")

def run_local_job(execution, exe, args, workdir, timeout):
    target = execution['target']
    msg = SUCCESS_STR

    try:
        env = os.environ.copy()
        env['TARGET_IP'] = target['ip']
        env['TARGET_EXTRA'] = target['extra']

        proc = subprocess.run(args,
                              executable=os.path.abspath(exe),
                              stdin=subprocess.DEVNULL,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
                              timeout=timeout,
                              env=env,
                              cwd=os.path.abspath(workdir))
        if proc.returncode != 0:
            msg = f'{redify("failed")}, exit status {proc.returncode}'
        stdout = proc.stdout
        stderr = proc.stderr
    except subprocess.TimeoutExpired as e:
        msg = TIMEOUT_STR
        stdout = e.stdout
        stderr = e.stderr

    if stdout:
        stdout = stdout.decode(encoding="utf-8", errors="ignore")
    else:
        stdout = ''

    if stderr:
        stderr = stderr.decode(encoding="utf-8", errors="ignore")
    else:
        stderr = ''

    flags = []
    try:
        flags = request('POST', f'job/execution/{execution["id"]}/finish', data={
            'stdout': stdout,
            'stderr': stderr,
        })
        execution['finished'] = True
    except Exception as e:
        msg = f'{yellowfy("unknown")}: Output submit API returned error'

    return {
        'execution': execution,
        'target': target,
        'msg': msg,
        'stdout': stdout,
        'stderr': stderr,
        'flags': flags,
    }
