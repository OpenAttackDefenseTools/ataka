from asyncio import sleep

from aiodocker import DockerError

from .localdata import *


class BuildError(Exception):
    pass


class Exploits:
    def __init__(self, docker):
        self._docker = docker
        self._exploits = {}

    async def ensure_exploit(self, exploit):
        if exploit.id not in self._exploits:
            self._exploits[exploit.id] = LocalExploit(id=exploit.id,
                                                      service=exploit.exploit_history.service,
                                                      author=exploit.author,
                                                      docker_name=exploit.docker_name,
                                                      status=LocalExploitStatus.BUILDING)
            await self.build_exploit(exploit.id)

        exploit = self._exploits[exploit.id]
        while exploit.status == LocalExploitStatus.BUILDING:
            await sleep(1)

        return exploit

    async def build_exploit(self, exploit_id):
        exploit = self._exploits[exploit_id]
        try:
            print(f"Building exploit {exploit_id} ({exploit.docker_name})...")
            tag = f"openattackdefensetools/ataka-exploit-{exploit.docker_name}"

            try:
                existing_ref = await self._docker.images.inspect(tag)
                exploit.build_output = "Notice: Re-Using existing image"
                exploit.status = LocalExploitStatus.FINISHED
                exploit.docker_id = existing_ref["Id"]
                exploit.docker_cmd = existing_ref["Config"]["Cmd"]
                print(f"Re-using image {exploit.docker_id}")
                return
            except DockerError:
                pass

            try:
                build_ref = self._docker.images.build(tag=tag,
                                                      fileobj=open(f"/data/exploits/{exploit.docker_name}", "rb"),
                                                      encoding="Dummy",
                                                      stream=True)
            except FileNotFoundError as e:
                build_ref = [{"error": f"FileNotFoundError: {e}"}]

            async for line in build_ref:
                if "stream" in line:
                    exploit.build_output += line["stream"]
                # else:
                #    print(line)

                if "error" in line:
                    exploit.build_output += f"ERROR: {line['error']}\n"
                    exploit.status = LocalExploitStatus.ERROR

                if "aux" in line:
                    exploit.docker_id = line["aux"]['ID']

            if exploit.docker_id is not None:
                # figure out docker config
                image_info = await self._docker.images.inspect(exploit.docker_id)
                exploit.status = LocalExploitStatus.FINISHED
                exploit.docker_cmd = image_info["Config"]["Cmd"]

        except DockerError as e:
            exploit.status = LocalExploitStatus.ERROR
            exploit.build_output += f"DOCKER BUILD ERROR: {e.message}"
